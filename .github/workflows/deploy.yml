name: Deploy to VPS

on: 
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Execute SSH commands
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Set up SSH for GitHub access
            mkdir -p ~/.ssh
            echo "${{ secrets.REPO_SSH_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            # Clone the private repository using SSH
            cd sussy_project
            if [ ! -d "ToIP_Workspace" ]; then
              echo "Cloning repository..."
              git clone -b main git@github.com:${{ github.repository }}.git ToIP_Workspace
            else
              echo "Updating repository..."
              cd ToIP_Workspace
              git fetch origin
              git checkout main
              git reset --hard origin/main
              docker compose down -v
            fi
            
            # Prepare files

            cd ToIP_Workspace
            mkdir -p config
            touch config/config.json
            cat > config/config.json <<EOL
            {
              "user": "${{ secrets.POSTGRES_USER }}",
              "password": "${{ secrets.POSTGRES_PASSWORD }}",
              "dbname": "${{ secrets.DBNAME }}",
              "host": "${{ secrets.HOST }}",
              "port": ${{secrets.PORT}}
            }
            EOL
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" > .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
            echo "POSTGRES_DB=${{ secrets.DBNAME }}" > .env
            echo "LOG_FORMAT=${{ secrets.LOG_FORMAT }}" > .env
            echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" > .env
            echo "EMAIL=${{ secrets.EMAIL }}" > .env
            echo "DOMAIN=${{ secrets.DOMAIN }}" > .env
            # Build and deploy
            docker compose build --no-cache
            docker compose up -d
            # Подчищаем за собой
            docker image prune -f --filter "until=24h"
  
