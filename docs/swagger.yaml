basePath: /
definitions:
  dto.AcademicGroupDTO:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CreateApplicationRequest:
    properties:
      group_id:
        type: integer
      message:
        type: string
    required:
    - group_id
    type: object
  dto.CreateGroupRequest:
    properties:
      academic_group_id:
        type: integer
      name:
        type: string
    required:
    - academic_group_id
    - name
    type: object
  dto.CreateTaskRequest:
    properties:
      deadline:
        type: string
      description:
        type: string
      group_id:
        type: integer
      subject_id:
        type: integer
      title:
        type: string
    required:
    - group_id
    - title
    type: object
  dto.GetGroupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/dto.GroupDTO'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationMeta'
    type: object
  dto.GroupApplicationDTO:
    properties:
      application_id:
        type: integer
      created_at:
        type: string
      group_id:
        type: integer
      message:
        type: string
      status:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  dto.GroupDTO:
    properties:
      academic_group_id:
        type: integer
      academic_group_name:
        type: string
      admin_username:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.ModeratorsResponse:
    properties:
      admin:
        $ref: '#/definitions/dto.UserDTO'
      moderators:
        items:
          $ref: '#/definitions/dto.UserDTO'
        type: array
    type: object
  dto.PaginationMeta:
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 3
        type: integer
      total:
        example: 25
        type: integer
    type: object
  dto.SubjectDTO:
    properties:
      academic_group_id:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  dto.SubjectDetailDTO:
    properties:
      academic_group:
        $ref: '#/definitions/dto.AcademicGroupDTO'
      groups:
        description: Groups in this academic group
        items:
          $ref: '#/definitions/dto.GroupDTO'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  dto.SubjectsDetailResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.PaginationMeta'
      subjects:
        items:
          $ref: '#/definitions/dto.SubjectDetailDTO'
        type: array
    type: object
  dto.SubjectsResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.PaginationMeta'
      subjects:
        items:
          $ref: '#/definitions/dto.SubjectDTO'
        type: array
    type: object
  dto.TaskDTO:
    properties:
      created_at:
        type: string
      deadline:
        type: string
      description:
        type: string
      group_id:
        type: integer
      id:
        type: integer
      is_verified:
        type: boolean
      subject_id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  dto.TaskDetailDTO:
    properties:
      academic_group:
        $ref: '#/definitions/dto.AcademicGroupDTO'
      created_at:
        type: string
      deadline:
        type: string
      description:
        type: string
      group:
        $ref: '#/definitions/dto.GroupDTO'
      id:
        type: integer
      is_verified:
        type: boolean
      subject:
        $ref: '#/definitions/dto.SubjectDTO'
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.UserDTO'
    type: object
  dto.TasksDetailResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.PaginationMeta'
      tasks:
        items:
          $ref: '#/definitions/dto.TaskDetailDTO'
        type: array
    type: object
  dto.TasksResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.PaginationMeta'
      tasks:
        items:
          $ref: '#/definitions/dto.TaskDTO'
        type: array
    type: object
  dto.UpdateGroupRequest:
    properties:
      academic_group_id:
        type: integer
      name:
        type: string
    type: object
  dto.UserDTO:
    properties:
      created_at:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  dto.VerificationRequest:
    properties:
      is_verified:
        type: boolean
    required:
    - is_verified
    type: object
  models.AcademicGroup:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Group:
    properties:
      academic_group_id:
        description: Foreign key to AcademicGroup
        type: integer
      academicGroup:
        $ref: '#/definitions/models.AcademicGroup'
      admin:
        $ref: '#/definitions/models.User'
      adminID:
        description: Foreign key to User (admin)
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.GroupModer:
    properties:
      createdAt:
        type: string
      group:
        $ref: '#/definitions/models.Group'
      groupID:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.GroupUser:
    properties:
      group:
        $ref: '#/definitions/models.Group'
      groupID:
        type: integer
      joinedAt:
        type: string
      role:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.Subject:
    properties:
      academicGroup:
        $ref: '#/definitions/models.AcademicGroup'
      academicGroupID:
        type: integer
      createdAt:
        type: string
      name:
        type: string
      subjectID:
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      hashPassword:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  routes.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  routes.ReviewStatusRequest:
    properties:
      status:
        enum:
        - approved
        - rejected
        type: string
      username:
        type: string
    required:
    - status
    - username
    type: object
  services.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: 4edu.su
info:
  contact:
    email: vasyutin.i.a@edu.mirea.ru, saakovi.d.@edu.mirea.ru, pronin.p.v@edu.mirea.ru
    name: Иван Васютин, Павел Пронин, Давит Саакови
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: СВАГА
  version: "1.0"
paths:
  /api/academic-groups:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all academic groups
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AcademicGroupDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all academic groups
      tags:
      - academic-groups
    post:
      consumes:
      - application/json
      description: Creates an academic group with the provided name
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: AcademicGroup data
        in: body
        name: academic_group
        required: true
        schema:
          $ref: '#/definitions/models.AcademicGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AcademicGroup'
        "400":
          description: Invalid request body or missing required fields
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new academic group
      tags:
      - academic-groups
  /api/academic-groups/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an academic group by ID
      parameters:
      - description: Academic Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Academic group deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid academic group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Academic group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete an academic group
      tags:
      - academic-groups
    get:
      consumes:
      - application/json
      description: Retrieves an academic group
      parameters:
      - description: Academic Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AcademicGroup'
        "400":
          description: Invalid academic group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Academic group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get an academic group by ID
      tags:
      - academic-groups
    patch:
      consumes:
      - application/json
      description: Updates an academic group's name
      parameters:
      - description: Academic Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: AcademicGroup data (name only)
        in: body
        name: academic_group
        required: true
        schema:
          $ref: '#/definitions/models.AcademicGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AcademicGroup'
        "400":
          description: Invalid academic group ID or request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Academic group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an academic group
      tags:
      - academic-groups
  /api/group-moders:
    post:
      consumes:
      - application/json
      description: Creates a group-moderator relationship
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: GroupModer data
        in: body
        name: group_moder
        required: true
        schema:
          $ref: '#/definitions/models.GroupModer'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GroupModer'
        "400":
          description: Invalid request body or moderator already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add a moderator to a group
      tags:
      - group-moders
  /api/group-moders/{group_id}/{user_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a group-moderator relationship
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Group-moderator deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid group or user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Group-moderator not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove a moderator from a group
      tags:
      - group-moders
    get:
      consumes:
      - application/json
      description: Retrieves a group-moderator relationship
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GroupModer'
        "400":
          description: Invalid group or user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Group-moderator not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a group-moderator relationship
      tags:
      - group-moders
  /api/group-users:
    post:
      consumes:
      - application/json
      description: Creates a group-user relationship with a role
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: GroupUser data
        in: body
        name: group_user
        required: true
        schema:
          $ref: '#/definitions/models.GroupUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GroupUser'
        "400":
          description: Invalid request body or missing required fields
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add a user to a group
      tags:
      - group-users
  /api/group-users/{group_id}/{user_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a group-user relationship
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Group-user deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid group or user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Group-user not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove a user from a group
      tags:
      - group-users
    get:
      consumes:
      - application/json
      description: Retrieves a group-user relationship with preloaded Group and User
        data
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GroupUser'
        "400":
          description: Invalid group or user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Group-user not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a group-user relationship
      tags:
      - group-users
    patch:
      consumes:
      - application/json
      description: Updates the role of a group-user relationship
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: GroupUser data (role only)
        in: body
        name: group_user
        required: true
        schema:
          $ref: '#/definitions/models.GroupUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GroupUser'
        "400":
          description: Invalid group ID, user ID, or request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Group-user not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a group-user role
      tags:
      - group-users
  /api/groups:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of groups with name, admin username,
        and academic group. Accessible to any authenticated user.
      parameters:
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetGroupsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all groups with pagination
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Creates a group with the provided details, setting the authenticated
        user as admin.
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: Group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GroupDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new group
      tags:
      - groups
  /api/groups/{group_id}/subjects/{subject_id}/tasks:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of tasks for a subject within a group,
        accessible to group members.
      parameters:
      - description: Group ID
        example: 1
        in: path
        name: group_id
        required: true
        type: integer
      - description: Subject ID
        example: 1
        in: path
        name: subject_id
        required: true
        type: integer
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TasksResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get tasks by subject and group
      tags:
      - tasks
  /api/groups/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a group by ID, restricted to the group admin.
      parameters:
      - description: Group ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a group
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: Retrieves a group by ID with preloaded AcademicGroup and Admin
        data. Accessible to any authenticated user.
      parameters:
      - description: Group ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GroupDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a group by ID
      tags:
      - groups
    patch:
      consumes:
      - application/json
      description: Updates a group's name or academic group ID, restricted to the
        group admin.
      parameters:
      - description: Group ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: Group data (partial)
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GroupDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a group
      tags:
      - groups
  /api/groups/{id}/moderators:
    get:
      consumes:
      - application/json
      description: Retrieves the admin and moderators of a group, accessible to admins
        or moderators of the group.
      parameters:
      - description: Group ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ModeratorsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get group moderators and admin
      tags:
      - groups
  /api/groups/{id}/subjects:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of subjects for the group's academic
        group, accessible to group members.
      parameters:
      - description: Group ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubjectsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get subjects by group ID
      tags:
      - subjects
  /api/groups/{id}/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users who are members of the specified group,
        accessible to group members.
      parameters:
      - description: Group ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get users in a group
      tags:
      - groups
  /api/groups/applications:
    post:
      consumes:
      - application/json
      description: Submit an application to join a group with an optional message.
      parameters:
      - description: Application details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateApplicationRequest'
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Apply to a group
      tags:
      - group_applications
  /api/groups/applications/{group_id}/review:
    patch:
      consumes:
      - application/json
      description: Approve or reject a group application for a user to join a group.
        Requires admin or moderator privileges for the group.
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: Review details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routes.ReviewStatusRequest'
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Review a group application
      tags:
      - group_applications
  /api/groups/applications/pending:
    get:
      consumes:
      - application/json
      description: Retrieve all pending applications for groups where the user is
        an admin or moderator.
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GroupApplicationDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get pending group applications
      tags:
      - group_applications
  /api/groups/available:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of groups where the authenticated user
        is not a member, admin, or moderator.
      parameters:
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetGroupsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get groups available to apply to
      tags:
      - groups
  /api/groups/my-groups:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of groups where the authenticated user
        is a member, moderator, or admin.
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetGroupsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user's groups
      tags:
      - groups
  /api/subjects:
    post:
      consumes:
      - application/json
      description: Creates a subject with the provided details
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: Subject data
        in: body
        name: subject
        required: true
        schema:
          $ref: '#/definitions/models.Subject'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Subject'
        "400":
          description: Invalid request body or missing required fields
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new subject
      tags:
      - subjects
  /api/subjects/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a subject by ID
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Subject deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid subject ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Subject not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a subject
      tags:
      - subjects
    get:
      consumes:
      - application/json
      description: Retrieves a subject with preloaded Group data
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Subject'
        "400":
          description: Invalid subject ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Subject not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a subject by ID
      tags:
      - subjects
    patch:
      consumes:
      - application/json
      description: Updates a subject's name, description, or group_id
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      - description: Subject data (partial)
        in: body
        name: subject
        required: true
        schema:
          $ref: '#/definitions/models.Subject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Subject'
        "400":
          description: Invalid subject ID or request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Subject not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a subject
      tags:
      - subjects
  /api/subjects/my-groups:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of subjects from the academic groups
        of the user's groups, including group and academic group details.
      parameters:
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubjectsDetailResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get subjects from user's groups
      tags:
      - subjects
  /api/tasks:
    get:
      consumes:
      - application/json
      description: Get a paginated list of tasks for the specified group
      parameters:
      - description: Group ID
        in: query
        name: group_id
        required: true
        type: integer
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TasksResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get tasks in a group
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task in the specified group
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskRequest'
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new task
      tags:
      - tasks
  /api/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by ID, if user is an admin or moderator of the task's
        group
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get details of a task by ID, if user is a member of the task's
        group
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a specific task
      tags:
      - tasks
  /api/tasks/{id}/verify:
    patch:
      consumes:
      - application/json
      description: Verify or deny a task's legitimacy
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Verification Status
        in: body
        name: verify
        required: true
        schema:
          $ref: '#/definitions/dto.VerificationRequest'
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify a task
      tags:
      - tasks
  /api/tasks/my-groups:
    get:
      consumes:
      - application/json
      description: Get a paginated list of tasks from all groups the user is a member
        of, including group, subject, and academic group details.
      parameters:
      - default: 1
        description: Page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        example: 10
        in: query
        name: page_size
        type: integer
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TasksDetailResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get tasks from all user's groups
      tags:
      - tasks
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password, returning a JWT
        token for protected endpoints.
      operationId: login
      parameters:
      - description: User credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user and generate JWT token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      operationId: register
      parameters:
      - description: User registration input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/routes.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: registered
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
